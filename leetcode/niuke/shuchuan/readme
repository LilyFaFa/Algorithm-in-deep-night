https://www.nowcoder.com/practice/a6a656249f404eb498d16b2f8eaa2c60?tpId=85&&tqId=29898&rp=1&ru=/activity/oj&qru=/ta/2017test/question-ranking


笔记
收藏
纠错
上一题 
 讨论
 排行
 我的提交
Go(1.9.1)重置自测

<
1
package main
2
​
3
import (
4
    "fmt"
5
    "sort"
6
    "strings"
7
)
8
​
9
func main() {
10
    var result []string
11
    for {
12
        var num int
13
        //使用control+D结束输入循环
14
        n, _ := fmt.Scan(&num)
15
        if n == 0 {
16
            break
17
        }
18
        var numbers []string
19
        var max string
20
        for i := 0; i < num; i++ {
21
            var n string
22
            fmt.Scanf("%s", &n)
23
            numbers = append(numbers, n)
24
        }
25
        sort.Strings(numbers)
26
        flag := 0
27
        for i := 0; i < len(numbers)-1; i++ {
28
            if strings.HasPrefix(numbers[i+1], numbers[i]) && len(numbers[i+1]) > len(numbers[i]) && numbers[i+1][len(numbers[i])] < numbers[i][0] {
29
                flag++
30
            } else if flag != 0 {
31
                f := flag
32
                for j := 0; j < (f+1)/2; j++ {
33
                    tmp := numbers[i]
34
                    numbers[i] = numbers[i-flag]
35
                    numbers[i-flag] = tmp
36
                    flag--
37
                    i--
38
                }
39
                flag = 0
40
            }
41
        }
42
        for i := num - 1; i >= 0; i-- {
43
            max = max + numbers[i]
44
        }
45
        result = append(result, max)
46
    }
47
    for _, r := range result {
48
        fmt.Println(r)
49
    }
50
​
51
}
52
​
保存并调试 求助
不通过
您的代码已保存
答案错误:您提交的程序没有通过所有的测试用例
case通过率为70.00%

测试用例:
37
93 672 946 153 947 82 522 772 725 413 936 649 399 123 821 93 29 860 572 344 608 590 554 210 115 307 313 535 636 184 291 66 178 379 204 523 758

对应输出应该为:

9479469393936860828217727587256726664963660859057255453552352241339937934431330729291210204184178153123115
9479469393693860828217727587256726664963660859057255453552352241339937934431330729291210204184178153123115

9939889729659619595395390903900854849840836807793777673172872070470369867967767567166565565564630629588576568564557551549542525224764594494434193683643434134033533430029929729128227926724424022921320620519419172162159157156131125119
9939889729659619595395390903900854849840836807793776773172872070470369867967767567166565565564630629588576568564557551549542525224764594494434193683643434134033533430029929729128227926724424022921320620519419172162159157156131125119
9939889729659619595395390903900854849840836807793777673172872070470369867967767567166565565564630629588576568564557551549542525224764594494434193683643434134033533430029929729128227926724424022921320620519419172162159157156131125119
9939889729659619595395390903900854849840836807793776773172872070470369867967767567166565565564630629588576568564557551549542525224764594494434193683643434134033533430029929729128227926724424022921320620519419172162159157156131125119
966958956952949940940907907875851820804796791773772719713682676667664656647616086060460159593586578575685675665635595375265150649748748484467466464604554474424374264203993963823783753573493253153133002942882872752692672652542524524521921919819519218918417717616616315413813513130121107
966958956952949940940907907875851820804796791773772719713682676667664656647616086060460159593586578575685675665635595375265150649748748448467466464604554474424374264203993963823783753573493253153133002942882872752692672652542524524521921919819519218918417717616616315413813513130121107