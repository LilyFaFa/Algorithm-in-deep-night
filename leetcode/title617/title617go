package main

type TreeNode struct {
	Val   int
	Left  *TreeNode
	Right *TreeNode
}

func mergeTrees(t1 *TreeNode, t2 *TreeNode) *TreeNode {
	merge(t1, t2)
	return t1
}

func merge(t1 *TreeNode, t2 *TreeNode) {
	if t1 != nil && t2 != nil {
		t1.Val = t1.Val + t2.Val
	} else if t2 != nil {
		/*
			这样操作并不会改变的原来的t1，因为传的是指针，对于原来是空指针的t1而言，重新创建
			一个就是创新创建了一个临时变量，所以这个操作是不对的
				t1 = &TreeNode{
					Val:   t2.Val,
					Left:  t2.Left,
					Right: t2.Right,
				}
		*/
	} else {
		return
	}

	if t2.Left != nil {
		merge(t1.Left, t2.Left)
	}
	if t2.Right != nil {
		merge(t1.Right, t2.Right)
	}

}
